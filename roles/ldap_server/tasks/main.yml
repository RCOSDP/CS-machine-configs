---

# Role: ldap_server
# Configure a server as an LDAP server


# install LDAP server and basic setup
#
- name: install slpad
  apt:
    state: present
    name:
      - slapd
      - ldap-utils

# if ldap_root_password_hash is not defined, generate it from root password
- name: obtain hash of root password
  command: slappasswd -s {{ ldap_root_password }}
  register: slappasswd_root
  when: ldap_root_password_hash is not defined

- name: set ldap_root_password_hash
  set_fact:
    ldap_root_pw_hash: "{{ slappasswd_root.stdout }}"
  when: ldap_root_password_hash is not defined

# set root password
- name: generates /tmp/change_root_pw.ldif
  template:
    src: change_root_pw.ldif.j2
    dest: /tmp/change_root_pw.ldif

- name: changes LDAP root password
  command: ldapadd -Y EXTERNAL -H ldapi:/// -f /tmp/change_root_pw.ldif

# if ldap_domain_password_hash is not defined, generate it from domain password
- name: obtain hash of domain password
  command: slappasswd -s {{ ldap_domain_password }}
  register: slappasswd_domain
  when: ldap_domain_password_hash is not defined

- name: set ldap_domain_password_hash
  set_fact:
    ldap_domain_password_hash: "{{ slappasswd_domain.stdout }}"
  when: ldap_domain_password_hash is not defined

- name: generates /tmp/make_domain.ldif
  template:
    src: make_domain.ldif.j2
    dest: /tmp/make_domain.ldif

- name: makes an LDAP domain
  shell: ldapsearch -Y EXTERNAL -H ldapi:/// -s base -b {{ ldap_domain }} || slapadd -l /tmp/make_domain.ldif



# Make the LDAP server refer to itself
#
- name: configure LDAP server as a client
  include_role:
    name: ldap_client


# Create LDAP users
#
   
# copy group csv file to the remote host
#
- name: copy ldap_groups.csv
  copy:
    src: ldap_groups.csv
    dest: /tmp/ldap_groups.csv

#
# read the group csv file and define the variable
#
- name: include group definitions from csv
  read_csv:
    path: /tmp/ldap_groups.csv
  register: ldap_groups

#
# copy user csv file to the remote host
# NOTE: plain pw column in the csv file
# is actually unncessary (retained for
# convenience)
#
- name: copy ldap_users.csv
  copy:
    src: ldap_users.csv
    dest: /tmp/ldap_users.csv

#
# read the user csv file and define the variable
#
- name: include user definitions from csv
  read_csv:
    path: /tmp/ldap_users.csv
  register: ldap_users

#
# generate an ldif file for each group
#
- name: generate group ldif files from group csv
  template:
    src: group.ldif.j2
    dest: /tmp/group-{{ item.gid }}.ldif
  loop: "{{ ldap_groups.list }}"

#
# generate an ldif file for each group
#
- name: generate group ldif files from user csv
  template:
    src: group.ldif.j2
    dest: /tmp/group-{{ item.gid }}.ldif
  loop: "{{ ldap_users.list }}"

#
# generate an ldif file for each user
#
- name: generate user ldif files
  template:
    src: user.ldif.j2
    dest: /tmp/user-{{ item.uid }}.ldif
  loop: "{{ ldap_users.list }}"


- name: generate a shell script to ldapadd all user/group ldif files
  template:
    src: add_users_groups.sh
    dest: /tmp/add_users_groups.sh


- name: ldapadd all user ldif files
  command: bash /tmp/add_users_groups.sh

- name: ensure home directories exist
  file:
    path: "{{ item.homedirectory }}"
    state: directory
    owner: "{{ item.uid }}"
    group: "{{ item.gid }}"
    mode: "{{ item.homedirectory_perm }}"
  with_items: "{{ ldap_users.list }}"

- name: ensure HOME/.ssh exist
  file:
    path: "{{ item.homedirectory }}/.ssh"
    state: directory
    owner: "{{ item.uid }}"
    group: "{{ item.gid }}"
    mode: '0700'
  with_items: "{{ ldap_users.list }}"

- name: ensure HOME/.ssh/authorized_keys exist
  copy:
    dest: "{{ item.homedirectory }}/.ssh/authorized_keys"
    owner: "{{ item.uid }}"
    group: "{{ item.gid }}"
    mode: '0600'
    content: "{{ item.authorized_keys }}"
  with_items: "{{ ldap_users.list }}"

