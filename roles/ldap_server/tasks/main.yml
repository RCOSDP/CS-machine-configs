---

# Role: ldap_server
# Configure a server as an LDAP server


# install LDAP server and basic setup
#
- name: install slpad
  apt:
    state: present
    name:
      - slapd
      - ldap-utils

# if ldap_root_password_hash is not defined, generate it from root password
- name: obtain hash of root password
  command: slappasswd -s {{ ldap_root_password }}
  register: slappasswd_root
  when: ldap_root_password_hash is not defined

- name: set ldap_root_password_hash
  set_fact:
    ldap_root_pw_hash: "{{ slappasswd_root.stdout }}"
  when: ldap_root_password_hash is not defined

# set root password
- name: generates /tmp/change_root_pw.ldif
  template:
    src: change_root_pw.ldif.j2
    dest: /tmp/change_root_pw.ldif

- name: changes LDAP root password
  command: ldapadd -Y EXTERNAL -H ldapi:/// -f /tmp/change_root_pw.ldif

# if ldap_domain_password_hash is not defined, generate it from domain password
- name: obtain hash of domain password
  command: slappasswd -s {{ ldap_domain_password }}
  register: slappasswd_domain
  when: ldap_domain_password_hash is not defined

- name: set ldap_domain_password_hash
  set_fact:
    ldap_domain_password_hash: "{{ slappasswd_domain.stdout }}"
  when: ldap_domain_password_hash is not defined

- name: generates /tmp/make_domain.ldif
  template:
    src: make_domain.ldif.j2
    dest: /tmp/make_domain.ldif

- name: makes an LDAP domain
  shell: ldapsearch -Y EXTERNAL -H ldapi:/// -s base -b {{ ldap_domain }} || slapadd -l /tmp/make_domain.ldif



# Make the LDAP server refer to itself
#
- name: configure LDAP server as a client
  include_role:
    name: ldap_client


# Create LDAP users
#

#
# copy tool
#
- name: copy ldaptool
  copy:
    src: ldaptool/bin
    dest: /usr/local/
    mode: preserve

#
# check ldap_groups.csv exists
#
- name: check ldap_groups.csv exists on local
  delegate_to: localhost
  run_once: true
  become: no
  stat:
    path: "{{ ldap_groups_csv }}"
  register: ldap_groups

#
# check ldap_users.csv exists
#
- name: check ldap_users.csv exists on local
  delegate_to: localhost
  run_once: true
  become: no
  stat:
    path: "{{ ldap_users_csv }}"
  register: ldap_users


#
# copy group csv file to the remote host
#
- name: copy ldap_groups.csv
  copy:
    src: "{{ ldap_groups_csv }}"
    dest: /tmp/ldap_groups.csv
  when: ldap_groups.stat.exists

#
# copy user csv file to the remote host
# NOTE: plain pw column in the csv file
# is actually unncessary (retained for
# convenience)
#
- name: copy ldap_users.csv
  copy:
    src: "{{ ldap_users_csv }}"
    dest: /tmp/ldap_users.csv
  when: ldap_users.stat.exists

#
# create all users and groups    
#
- name: create all users and groups
  shell: /usr/local/bin/ldap_addgroups /tmp/ldap_groups.csv && /usr/local/bin/ldap_addusers /tmp/ldap_users.csv
  when: ldap_groups.stat.exists and ldap_users.stat.exists

#
# delete group csv file
#
- name: remove ldap_groups.csv
  file:
    path: /tmp/ldap_groups.csv
    state: absent

#
# delete users csv file
#
- name: remove ldap_users.csv
  file:
    dest: /tmp/ldap_users.csv
    state: absent

