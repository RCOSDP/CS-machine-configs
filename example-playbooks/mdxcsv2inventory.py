#!/usr/bin/env python3

import argparse
import csv
import sys
import json

def csv2dictlist(csvfile):
    reader = csv.DictReader(csvfile)
    return [ row for row in reader ]

def generate_inventory(args):

    vms = csv2dictlist(args.csv)
    vms.sort(key = lambda x: x["VM_NAME"])

    w = lambda x: args.output.write(x + "\n")

    # write a group that contains all nodes
    w("[{}]".format(args.group_name))
    for vm in filter(lambda v: v["SERVICE_NET_1_IPv4"], vms):
        w("{:<15} hostname={}".format(vm["SERVICE_NET_1_IPv4"], vm["VM_NAME"]))
    w("")
    
    # write vars for all node group
    w("[{}:vars]".format(args.group_name))
    w("ansbile_user={}".format(args.ansible_user))
    w("")

    # write a group that contains RDMA IF addrs of nodes
    if args.rdma_node_group:
        w("[{}]".format(args.rdma_node_group))
        for vm in filter(lambda v: v["STORAGE_NET_1_IPv4"], vms):
            w("{:<15} hostname={}-rdma".format(vm["STORAGE_NET_1_IPv4"],
                                               vm["VM_NAME"]))
    w("")

    # write per-node groups
    if args.per_node_groups:
        for vm in filter(lambda v: v["SERVICE_NET_1_IPv4"], vms):
            w("[{}]".format(vm["VM_NAME"]))
            w(vm["SERVICE_NET_1_IPv4"])
            w("")
            

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--ansible-user", default = "mdxuser",
                        help = "user to run ansible, default is mdxuser")
    parser.add_argument("-g", "--group-name", default = "default",
                        help = "group name for all nodes, default is default")
    parser.add_argument("--rdma-node-group",
                        help = "group containing addrs of RDMA ports")
    parser.add_argument("--per-node-groups", action = "store_true",
                        help = "make per-node groups in the inventory")
    parser.add_argument("--output", type = argparse.FileType("w"),
                        default = sys.stdout,
                        help = "output file name, default is STDOUT")
    parser.add_argument("csv",
                        type = argparse.FileType("r", encoding = "utf_8_sig"),
                        help = "CSV file generated by mdx user portal")

    args = parser.parse_args()

    generate_inventory(args)


if __name__ == "__main__":
    main()
